Sure! Here's your text cleaned up with all the asterisks (*) removed for easier reading:---Framework:---Data Driven - ExcelPage Object Model - LocatorsTestNGJUnitCucumberPre-requisites:---Maven ProjectBase class creationMaven Project:---Java Project:---Selenium -> Jar file paste -> Build path configure -> 10 mins10 Jar -> 10*10 = 100 mins = 2.5 hrsVersion update -> 4.2 -> 4.34Maven Project:---Dependency -> less than a minute we configureSteps to create Maven Project:---Step 1: Open EclipseStep 2: Click File -> New -> Maven ProjectStep 3: Enable the check box (Create simple maven Project) and Click nextStep 4:Group id: package name format -> com.omr, org.omrArtifact id: Project name -> Framework06_PmStep 5: Click FinishStep 6: Open pom.xml and if you got any error in Project, add s in first two http.Steps to Configure Selenium in maven project:---Step 1: Create maven project.Step 2: Open pom.xmlStep 3: Create <dependencies> under versionStep 4: Open Google chrome and type Selenium maven dependencyStep 5: Go to Maven Repository (First link)Step 6: Take the latest version or below one latest versionStep 7: Copy the dependencyStep 8: Paste under dependencies and save itStep 9: Check whether it is present in Maven Dependencies.Steps to launch a browser in Maven Project:---Step 1: Create a class under src/test/javaTopics Covered Today:---Different types of frameworkJava Project vs Maven ProjectHow to create a maven project?How to add dependency in pom.xml?How to create a class in src/test/java?Baseclass Creation:---What is Base class?---Application - 50 Operations (10 Drop down)```javaSelect select = new Select(elementrefname);select.selectByVisibleText("India");``````javapublic void dropdownByVisibleText(WebElement element, String text) {    Select select = new Select(element);    select.selectByVisibleText(text);}```Usage:```javadropdownByVisibleText(elementrefname, "India");```Advantages of Baseclass:---Code reusability.Memory wastage reduction.---Data Driven Framework:-> Test Data = Directly passed through send keys.-> Here, we pass the test data from external file mostly excel sheet.Steps to get data from excel sheet:Pre-requiste:appache - poi -> dependencyStep 1: Copy the poi-ooxml dependency from google chromeStep 2: Paste in the pom.xmlStep 3: Open a new excel sheet and add some data and save in a location.Step 4: Create a new folder under your project by naming "Excelsheet"Step 5: Copy the excel sheet from system location and paste in the eclipse excelsheet folder.Step 6: Mention the path of the excel locationStep 7: Create an object for File input stream classStep 8: Create an object workbook interfaceStep 9: Get the sheet from the workbookStep 10: Get the row from the sheetStep 11: Get cell from the row	// 1. Mention the path of the excel location		File file = new File("C:\\Greens\\Eclipse-greens\\Framework_06Pm\\Excelsheet\\Framework_06Pm.xlsx");		// 2. Create an object for File input stream class		FileInputStream fileInputStream = new FileInputStream(file);		// 3. Create an object workbook interface		Workbook book = new XSSFWorkbook(file);		// 4. Get the sheet from the workbook		Sheet sheet = book.getSheet("Sheet1");		// 5. Get the row from the sheet		Row row = sheet.getRow(1);		// 6. Get cell from the row		Cell cell = row.getCell(1);		System.out.println(cell);To print all the values in excelsheet:Step 1: Copy the poi-ooxml dependency from google chromeStep 2: Paste in the pom.xmlStep 3: Open a new excel sheet and add some data and save in a location.Step 4: Create a new folder under your project by naming "Excelsheet"Step 5: Copy the excel sheet from system location and paste in the eclipse excelsheet folder.Step 6: Mention the path of the excel locationStep 7: Create an object for File input stream classStep 8: Create an object workbook interfaceStep 9: Get the sheet from the workbookStep 10: Using getPhysicalNumberOfRows and cells and by iterating we can get all the values// 1. Mention the path of the excel locationFile file = new File("C:\Greens\Eclipse-greens\Framework_06Pm\Excelsheet\Framework_06Pm.xlsx");// 2. Create an object for File input stream classFileInputStream fileInputStream = new FileInputStream(file);// 3. Create an object workbook interfaceWorkbook book = new XSSFWorkbook(file);// 4. Get the sheet from the workbookSheet sheet = book.getSheet("Sheet1");// 5. Get all rows using for loopfor (int i = 0; i < sheet.getPhysicalNumberOfRows(); i++) {Row row = sheet.getRow(i);if (row != null) {for (int j = 0; j < row.getPhysicalNumberOfCells(); j++) {Cell cell = row.getCell(j);System.out.println(cell);}}	}To open a excel sheet in Eclipse:-> Right Click -> Open with System editorNote: To pass into test scripts, the data should be in String, so we are converting cell into string by using getStringCellValue()Only for String---Cell cell = row.getCell(0);String stringCellValue = cell.getStringCellValue();String password = row.getCell(1).getStringCellValue();For Number----> We need to use cell.getNumericCellValue()double numericCellValue = cell.getNumericCellValue();DecimalFormat decimalFormat = new DecimalFormat("#");String format = decimalFormat.format(numericCellValue);System.out.println(format);Resuable method to get all data types:	public String readDataFromExcel(String sheetName, int rowIndex, int cellIndex)			throws InvalidFormatException, IOException {		File file = new File("C:\\Greens\\Eclipse-greens\\Framework_06Pm\\Excelsheet\\Framework_06Pm.xlsx");		FileInputStream fileInputStream = new FileInputStream(file);		Workbook book = new XSSFWorkbook(file);		Sheet sheet = book.getSheet(sheetName);		Row row = sheet.getRow(rowIndex);		Cell cell = row.getCell(cellIndex);		CellType cellType = cell.getCellType();		String result = null;		switch (cellType) {		case NUMERIC:			double numericCellValue = cell.getNumericCellValue();			DecimalFormat decimalFormat = new DecimalFormat("#");			result = decimalFormat.format(numericCellValue);			break;		case STRING:			result = cell.getStringCellValue();		default:			break;		}		return result;	}